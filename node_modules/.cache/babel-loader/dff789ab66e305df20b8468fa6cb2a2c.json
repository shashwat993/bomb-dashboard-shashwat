{"ast":null,"code":"var _jsxFileName = \"/home/shashwat/Projects/Intern/src/contexts/Banks/Banks.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Context from './context';\nimport useBombFinance from '../../hooks/useBombFinance';\nimport config, { bankDefinitions } from '../../config';\n\nconst Banks = _ref => {\n  let {\n    children\n  } = _ref;\n  const [banks, setBanks] = useState([]);\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance === null || bombFinance === void 0 ? void 0 : bombFinance.isUnlocked;\n  const fetchPools = useCallback(async () => {\n    const banks = [];\n\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      if (bankInfo.finished) {\n        if (!bombFinance.isUnlocked) continue; // only show pools staked by user\n\n        const balance = await bombFinance.stakedBalanceOnBank(bankInfo.contract, bankInfo.poolId, bombFinance.myAccount);\n\n        if (balance.lte(0)) {\n          continue;\n        }\n      }\n\n      banks.push({ ...bankInfo,\n        address: config.deployments[bankInfo.contract].address,\n        depositToken: bombFinance.externalTokens[bankInfo.depositTokenName],\n        earnToken: bankInfo.earnTokenName === 'BOMB' ? bombFinance.BOMB : bombFinance.BSHARE\n      });\n    }\n\n    banks.sort((a, b) => a.sort > b.sort ? 1 : -1);\n    setBanks(banks);\n  }, [bombFinance, setBanks]);\n  useEffect(() => {\n    if (bombFinance) {\n      fetchPools().catch(err => console.error(`Failed to fetch pools: ${err.stack}`));\n    }\n  }, [isUnlocked, bombFinance, fetchPools]);\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      banks\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 10\n    }\n  }, children);\n};\n\nexport default Banks;","map":{"version":3,"sources":["/home/shashwat/Projects/Intern/src/contexts/Banks/Banks.tsx"],"names":["React","useCallback","useEffect","useState","Context","useBombFinance","config","bankDefinitions","Banks","children","banks","setBanks","bombFinance","isUnlocked","fetchPools","bankInfo","Object","values","finished","balance","stakedBalanceOnBank","contract","poolId","myAccount","lte","push","address","deployments","depositToken","externalTokens","depositTokenName","earnToken","earnTokenName","BOMB","BSHARE","sort","a","b","catch","err","console","error","stack"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAsD,OAAtD;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AAEA,OAAOC,MAAP,IAAgBC,eAAhB,QAAsC,cAAtC;;AAEA,MAAMC,KAAe,GAAG,QAAgB;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AACtC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAS,EAAT,CAAlC;AACA,QAAMS,WAAW,GAAGP,cAAc,EAAlC;AACA,QAAMQ,UAAU,GAAGD,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEC,UAAhC;AAEA,QAAMC,UAAU,GAAGb,WAAW,CAAC,YAAY;AACzC,UAAMS,KAAa,GAAG,EAAtB;;AAEA,SAAK,MAAMK,QAAX,IAAuBC,MAAM,CAACC,MAAP,CAAcV,eAAd,CAAvB,EAAuD;AACrD,UAAIQ,QAAQ,CAACG,QAAb,EAAuB;AACrB,YAAI,CAACN,WAAW,CAACC,UAAjB,EAA6B,SADR,CAGrB;;AACA,cAAMM,OAAO,GAAG,MAAMP,WAAW,CAACQ,mBAAZ,CACpBL,QAAQ,CAACM,QADW,EAEpBN,QAAQ,CAACO,MAFW,EAGpBV,WAAW,CAACW,SAHQ,CAAtB;;AAKA,YAAIJ,OAAO,CAACK,GAAR,CAAY,CAAZ,CAAJ,EAAoB;AAClB;AACD;AACF;;AACDd,MAAAA,KAAK,CAACe,IAAN,CAAW,EACT,GAAGV,QADM;AAETW,QAAAA,OAAO,EAAEpB,MAAM,CAACqB,WAAP,CAAmBZ,QAAQ,CAACM,QAA5B,EAAsCK,OAFtC;AAGTE,QAAAA,YAAY,EAAEhB,WAAW,CAACiB,cAAZ,CAA2Bd,QAAQ,CAACe,gBAApC,CAHL;AAITC,QAAAA,SAAS,EAAEhB,QAAQ,CAACiB,aAAT,KAA2B,MAA3B,GAAoCpB,WAAW,CAACqB,IAAhD,GAAuDrB,WAAW,CAACsB;AAJrE,OAAX;AAMD;;AACDxB,IAAAA,KAAK,CAACyB,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACD,IAAF,GAASE,CAAC,CAACF,IAAX,GAAkB,CAAlB,GAAsB,CAAC,CAA7C;AACAxB,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,GA1B6B,EA0B3B,CAACE,WAAD,EAAcD,QAAd,CA1B2B,CAA9B;AA4BAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,WAAJ,EAAiB;AACfE,MAAAA,UAAU,GAAGwB,KAAb,CAAoBC,GAAD,IAASC,OAAO,CAACC,KAAR,CAAe,0BAAyBF,GAAG,CAACG,KAAM,EAAlD,CAA5B;AACD;AACF,GAJQ,EAIN,CAAC7B,UAAD,EAAaD,WAAb,EAA0BE,UAA1B,CAJM,CAAT;AAMA,sBAAO,oBAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AAACJ,MAAAA;AAAD,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmCD,QAAnC,CAAP;AACD,CAxCD;;AA0CA,eAAeD,KAAf","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react';\nimport Context from './context';\nimport useBombFinance from '../../hooks/useBombFinance';\nimport {Bank} from '../../bomb-finance';\nimport config, {bankDefinitions} from '../../config';\n\nconst Banks: React.FC = ({children}) => {\n  const [banks, setBanks] = useState<Bank[]>([]);\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance?.isUnlocked;\n\n  const fetchPools = useCallback(async () => {\n    const banks: Bank[] = [];\n\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      if (bankInfo.finished) {\n        if (!bombFinance.isUnlocked) continue;\n\n        // only show pools staked by user\n        const balance = await bombFinance.stakedBalanceOnBank(\n          bankInfo.contract,\n          bankInfo.poolId,\n          bombFinance.myAccount,\n        );\n        if (balance.lte(0)) {\n          continue;\n        }\n      }\n      banks.push({\n        ...bankInfo,\n        address: config.deployments[bankInfo.contract].address,\n        depositToken: bombFinance.externalTokens[bankInfo.depositTokenName],\n        earnToken: bankInfo.earnTokenName === 'BOMB' ? bombFinance.BOMB : bombFinance.BSHARE,\n      });\n    }\n    banks.sort((a, b) => (a.sort > b.sort ? 1 : -1));\n    setBanks(banks);\n  }, [bombFinance, setBanks]);\n\n  useEffect(() => {\n    if (bombFinance) {\n      fetchPools().catch((err) => console.error(`Failed to fetch pools: ${err.stack}`));\n    }\n  }, [isUnlocked, bombFinance, fetchPools]);\n\n  return <Context.Provider value={{banks}}>{children}</Context.Provider>;\n};\n\nexport default Banks;\n"]},"metadata":{},"sourceType":"module"}