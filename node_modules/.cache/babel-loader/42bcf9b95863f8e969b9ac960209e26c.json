{"ast":null,"code":"let last, timeout;\n\nmodule.exports = (res, cb) => {\n  const values = [];\n  res.replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n  .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n  .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n  .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n  .split('|--|').forEach(data => {\n    if (last) data = last + data; // prepend the last chunk\n\n    let result;\n\n    try {\n      result = JSON.parse(data);\n    } catch (e) {\n      last = data;\n      clearTimeout(timeout); // restart timeout\n\n      timeout = setTimeout(() => cb(new Error('Parse response timeout')), 15 * 1000);\n      return;\n    }\n\n    clearTimeout(timeout);\n    last = null;\n    if (result) values.push(result);\n  });\n  cb(null, values);\n};","map":{"version":3,"sources":["/home/shashwat/Projects/Intern/node_modules/eth-provider/parse/index.js"],"names":["last","timeout","module","exports","res","cb","values","replace","split","forEach","data","result","JSON","parse","e","clearTimeout","setTimeout","Error","push"],"mappings":"AAAA,IAAIA,IAAJ,EAAUC,OAAV;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,GAAD,EAAMC,EAAN,KAAa;AAC5B,QAAMC,MAAM,GAAG,EAAf;AACAF,EAAAA,GAAG,CACAG,OADH,CACW,cADX,EAC2B,QAD3B,EACqC;AADrC,GAEGA,OAFH,CAEW,kBAFX,EAE+B,UAF/B,EAE2C;AAF3C,GAGGA,OAHH,CAGW,gBAHX,EAG6B,SAH7B,EAGwC;AAHxC,GAIGA,OAJH,CAIW,gBAJX,EAI6B,SAJ7B,EAIwC;AAJxC,GAKGC,KALH,CAKS,MALT,EAMGC,OANH,CAMWC,IAAI,IAAI;AACf,QAAIV,IAAJ,EAAUU,IAAI,GAAGV,IAAI,GAAGU,IAAd,CADK,CACc;;AAC7B,QAAIC,MAAJ;;AACA,QAAI;AACFA,MAAAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAT;AACD,KAFD,CAEE,OAAOI,CAAP,EAAU;AACVd,MAAAA,IAAI,GAAGU,IAAP;AACAK,MAAAA,YAAY,CAACd,OAAD,CAAZ,CAFU,CAEY;;AACtBA,MAAAA,OAAO,GAAGe,UAAU,CAAC,MAAMX,EAAE,CAAC,IAAIY,KAAJ,CAAU,wBAAV,CAAD,CAAT,EAAgD,KAAK,IAArD,CAApB;AACA;AACD;;AACDF,IAAAA,YAAY,CAACd,OAAD,CAAZ;AACAD,IAAAA,IAAI,GAAG,IAAP;AACA,QAAIW,MAAJ,EAAYL,MAAM,CAACY,IAAP,CAAYP,MAAZ;AACb,GApBH;AAqBAN,EAAAA,EAAE,CAAC,IAAD,EAAOC,MAAP,CAAF;AACD,CAxBD","sourcesContent":["let last, timeout\n\nmodule.exports = (res, cb) => {\n  const values = []\n  res\n    .replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n    .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n    .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n    .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n    .split('|--|')\n    .forEach(data => {\n      if (last) data = last + data // prepend the last chunk\n      let result\n      try {\n        result = JSON.parse(data)\n      } catch (e) {\n        last = data\n        clearTimeout(timeout) // restart timeout\n        timeout = setTimeout(() => cb(new Error('Parse response timeout')), 15 * 1000)\n        return\n      }\n      clearTimeout(timeout)\n      last = null\n      if (result) values.push(result)\n    })\n  cb(null, values)\n}\n"]},"metadata":{},"sourceType":"script"}