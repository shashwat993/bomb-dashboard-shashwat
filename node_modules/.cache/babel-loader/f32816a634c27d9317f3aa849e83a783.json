{"ast":null,"code":"import { BigNumber, ethers } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\nexport let ApprovalState; // returns a variable indicating the state of the approval and a function which approves if necessary or early returns\n\n(function (ApprovalState) {\n  ApprovalState[ApprovalState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  ApprovalState[ApprovalState[\"NOT_APPROVED\"] = 1] = \"NOT_APPROVED\";\n  ApprovalState[ApprovalState[\"PENDING\"] = 2] = \"PENDING\";\n  ApprovalState[ApprovalState[\"APPROVED\"] = 3] = \"APPROVED\";\n})(ApprovalState || (ApprovalState = {}));\n\nfunction useApprove(token, spender) {\n  const pendingApproval = useHasPendingApproval(token.address, spender);\n  const currentAllowance = useAllowance(token, spender, pendingApproval); // check the current approval status\n\n  const approvalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN; // amountToApprove will be defined if currentAllowance is\n\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT) ? pendingApproval ? ApprovalState.PENDING : ApprovalState.NOT_APPROVED : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval]);\n  const addTransaction = useTransactionAdder();\n  const approve = useCallback(async () => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(spender, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: spender\n      }\n    });\n  }, [approvalState, token, spender, addTransaction]);\n  return [approvalState, approve];\n}\n\nexport default useApprove;","map":{"version":3,"sources":["/home/shashwat/Projects/Intern/src/hooks/useApprove.ts"],"names":["BigNumber","ethers","useCallback","useMemo","useHasPendingApproval","useTransactionAdder","useAllowance","APPROVE_AMOUNT","constants","MaxUint256","APPROVE_BASE_AMOUNT","from","ApprovalState","useApprove","token","spender","pendingApproval","address","currentAllowance","approvalState","UNKNOWN","lt","PENDING","NOT_APPROVED","APPROVED","addTransaction","approve","console","error","response","summary","symbol","approval","tokenAddress"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,MAAnB,QAAgC,QAAhC;AACA,SAAQC,WAAR,EAAqBC,OAArB,QAAmC,OAAnC;AACA,SAAQC,qBAAR,EAA+BC,mBAA/B,QAAyD,6BAAzD;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAGA,MAAMC,cAAc,GAAGN,MAAM,CAACO,SAAP,CAAiBC,UAAxC;AACA,MAAMC,mBAAmB,GAAGV,SAAS,CAACW,IAAV,CAAe,2BAAf,CAA5B;AAEA,WAAYC,aAAZ,C,CAOA;;WAPYA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;GAAAA,a,KAAAA,a;;AAQZ,SAASC,UAAT,CAAoBC,KAApB,EAAkCC,OAAlC,EAAyF;AACvF,QAAMC,eAAe,GAAGZ,qBAAqB,CAACU,KAAK,CAACG,OAAP,EAAgBF,OAAhB,CAA7C;AACA,QAAMG,gBAAgB,GAAGZ,YAAY,CAACQ,KAAD,EAAQC,OAAR,EAAiBC,eAAjB,CAArC,CAFuF,CAIvF;;AACA,QAAMG,aAA4B,GAAGhB,OAAO,CAAC,MAAM;AACjD;AACA,QAAI,CAACe,gBAAL,EAAuB,OAAON,aAAa,CAACQ,OAArB,CAF0B,CAIjD;;AACA,WAAOF,gBAAgB,CAACG,EAAjB,CAAoBX,mBAApB,IACHM,eAAe,GACbJ,aAAa,CAACU,OADD,GAEbV,aAAa,CAACW,YAHb,GAIHX,aAAa,CAACY,QAJlB;AAKD,GAV2C,EAUzC,CAACN,gBAAD,EAAmBF,eAAnB,CAVyC,CAA5C;AAYA,QAAMS,cAAc,GAAGpB,mBAAmB,EAA1C;AAEA,QAAMqB,OAAO,GAAGxB,WAAW,CAAC,YAA2B;AACrD,QAAIiB,aAAa,KAAKP,aAAa,CAACW,YAApC,EAAkD;AAChDI,MAAAA,OAAO,CAACC,KAAR,CAAc,kCAAd;AACA;AACD;;AAED,UAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACY,OAAN,CAAcX,OAAd,EAAuBR,cAAvB,CAAvB;AACAkB,IAAAA,cAAc,CAACI,QAAD,EAAW;AACvBC,MAAAA,OAAO,EAAG,WAAUhB,KAAK,CAACiB,MAAO,EADV;AAEvBC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,YAAY,EAAEnB,KAAK,CAACG,OADZ;AAERF,QAAAA,OAAO,EAAEA;AAFD;AAFa,KAAX,CAAd;AAOD,GAd0B,EAcxB,CAACI,aAAD,EAAgBL,KAAhB,EAAuBC,OAAvB,EAAgCU,cAAhC,CAdwB,CAA3B;AAgBA,SAAO,CAACN,aAAD,EAAgBO,OAAhB,CAAP;AACD;;AAED,eAAeb,UAAf","sourcesContent":["import {BigNumber, ethers} from 'ethers';\nimport {useCallback, useMemo} from 'react';\nimport {useHasPendingApproval, useTransactionAdder} from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport ERC20 from '../bomb-finance/ERC20';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApprove(token: ERC20, spender: string): [ApprovalState, () => Promise<void>] {\n  const pendingApproval = useHasPendingApproval(token.address, spender);\n  const currentAllowance = useAllowance(token, spender, pendingApproval);\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval]);\n\n  const addTransaction = useTransactionAdder();\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(spender, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: spender,\n      },\n    });\n  }, [approvalState, token, spender, addTransaction]);\n\n  return [approvalState, approve];\n}\n\nexport default useApprove;\n"]},"metadata":{},"sourceType":"module"}