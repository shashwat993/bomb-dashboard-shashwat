{"ast":null,"code":"import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useWallet } from 'use-wallet';\nimport { useAddPopup, useBlockNumber } from '../application/hooks';\nimport { checkedTransaction, finalizeTransaction } from './actions';\nimport { getDefaultProvider } from '../../utils/provider';\nexport function shouldCheck(lastBlockNumber, tx) {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\nexport default function Updater() {\n  var _state$chainId;\n\n  const {\n    chainId,\n    ethereum\n  } = useWallet();\n  const lastBlockNumber = useBlockNumber();\n  const dispatch = useDispatch();\n  const state = useSelector(state => state.transactions);\n  const transactions = chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {}; // show popup on confirm\n\n  const addPopup = useAddPopup();\n  useEffect(() => {\n    if (!chainId || !ethereum || !lastBlockNumber) {\n      return;\n    }\n\n    const provider = getDefaultProvider();\n    Object.keys(transactions).filter(hash => shouldCheck(lastBlockNumber, transactions[hash])).forEach(hash => {\n      provider.getTransactionReceipt(hash).then(receipt => {\n        if (receipt) {\n          var _transactions$hash;\n\n          dispatch(finalizeTransaction({\n            chainId,\n            hash,\n            receipt: {\n              blockHash: receipt.blockHash,\n              blockNumber: receipt.blockNumber,\n              contractAddress: receipt.contractAddress,\n              from: receipt.from,\n              status: receipt.status,\n              to: receipt.to,\n              transactionHash: receipt.transactionHash,\n              transactionIndex: receipt.transactionIndex\n            }\n          }));\n          addPopup({\n            txn: {\n              hash,\n              success: receipt.status === 1,\n              summary: (_transactions$hash = transactions[hash]) === null || _transactions$hash === void 0 ? void 0 : _transactions$hash.summary\n            }\n          }, hash);\n        } else {\n          dispatch(checkedTransaction({\n            chainId,\n            hash,\n            blockNumber: lastBlockNumber\n          }));\n        }\n      }).catch(error => {\n        console.error(`failed to check transaction hash: ${hash}`, error);\n      });\n    });\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\n  return null;\n}","map":{"version":3,"sources":["/home/shashwat/Projects/Intern/src/state/transactions/updater.tsx"],"names":["useEffect","useDispatch","useSelector","useWallet","useAddPopup","useBlockNumber","checkedTransaction","finalizeTransaction","getDefaultProvider","shouldCheck","lastBlockNumber","tx","receipt","lastCheckedBlockNumber","blocksSinceCheck","minutesPending","Date","getTime","addedTime","Updater","chainId","ethereum","dispatch","state","transactions","addPopup","provider","Object","keys","filter","hash","forEach","getTransactionReceipt","then","blockHash","blockNumber","contractAddress","from","status","to","transactionHash","transactionIndex","txn","success","summary","catch","error","console"],"mappings":"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","sourcesContent":["import {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useWallet} from 'use-wallet';\nimport {useAddPopup, useBlockNumber} from '../application/hooks';\nimport {AppDispatch, AppState} from '../index';\nimport {checkedTransaction, finalizeTransaction} from './actions';\nimport {getDefaultProvider} from '../../utils/provider';\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: {addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number},\n): boolean {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\n\nexport default function Updater(): null {\n  const {chainId, ethereum} = useWallet();\n\n  const lastBlockNumber = useBlockNumber();\n\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  const transactions = chainId ? state[chainId] ?? {} : {};\n\n  // show popup on confirm\n  const addPopup = useAddPopup();\n\n  useEffect(() => {\n    if (!chainId || !ethereum || !lastBlockNumber) {\n      return;\n    }\n\n    const provider = getDefaultProvider();\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\n      .forEach((hash) => {\n        provider\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                }),\n              );\n\n              addPopup(\n                {\n                  txn: {\n                    hash,\n                    success: receipt.status === 1,\n                    summary: transactions[hash]?.summary,\n                  },\n                },\n                hash,\n              );\n            } else {\n              dispatch(checkedTransaction({chainId, hash, blockNumber: lastBlockNumber}));\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error);\n          });\n      });\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}