{"ast":null,"code":"const EventEmitter = require('events');\n\nconst uuid = require('uuid/v4');\n\nconst dev = process.env.NODE_ENV === 'development';\nlet XHR;\n\nclass HTTPConnection extends EventEmitter {\n  constructor(_XHR, url, options) {\n    super();\n    XHR = _XHR;\n    this.connected = false;\n    this.subscriptions = false;\n    this.status = 'loading';\n    this.url = url;\n    this.pollId = uuid();\n    setTimeout(() => this.create(), 0);\n  }\n\n  create() {\n    if (!XHR) return this.emit('error', new Error('No HTTP transport available'));\n    this.on('error', () => {\n      if (this.connected) this.close();\n    });\n    this.init();\n  }\n\n  init() {\n    this.send({\n      jsonrpc: '2.0',\n      method: 'eth_syncing',\n      params: [],\n      id: 1\n    }, (err, response) => {\n      if (err) return this.emit('error', err);\n      this.send({\n        jsonrpc: '2.0',\n        id: 1,\n        method: 'eth_pollSubscriptions',\n        params: [this.pollId, 'immediate']\n      }, (err, response) => {\n        if (!err) {\n          this.subscriptions = true;\n          this.pollSubscriptions();\n        }\n\n        this.connected = true;\n        this.emit('connect');\n      });\n    });\n  }\n\n  pollSubscriptions() {\n    this.send({\n      jsonrpc: '2.0',\n      id: 1,\n      method: 'eth_pollSubscriptions',\n      params: [this.pollId]\n    }, (err, result) => {\n      if (err) {\n        this.subscriptionTimeout = setTimeout(() => this.pollSubscriptions(), 10000);\n        return this.emit('error', err);\n      } else {\n        if (!this.closed) this.subscriptionTimeout = this.pollSubscriptions();\n\n        if (result) {\n          result.map(p => {\n            let parse;\n\n            try {\n              parse = JSON.parse(p);\n            } catch (e) {\n              parse = false;\n            }\n\n            return parse;\n          }).filter(n => n).forEach(p => this.emit('payload', p));\n        }\n      }\n    });\n  }\n\n  close() {\n    if (dev) console.log('Closing HTTP connection');\n    this.closed = true;\n    this.emit('close');\n    clearTimeout(this.subscriptionTimeout);\n    this.removeAllListeners();\n  }\n\n  filterStatus(res) {\n    if (res.status >= 200 && res.status < 300) return res;\n    const error = new Error(res.statusText);\n    error.res = res;\n    throw error.message;\n  }\n\n  error(payload, message) {\n    let code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    this.emit('payload', {\n      id: payload.id,\n      jsonrpc: payload.jsonrpc,\n      error: {\n        message,\n        code\n      }\n    });\n  }\n\n  send(payload, internal) {\n    if (this.closed) return this.error(payload, 'Not connected');\n\n    if (payload.method === 'eth_subscribe') {\n      if (this.subscriptions) {\n        payload.pollId = this.pollId;\n      } else {\n        return this.error(payload, 'Subscriptions are not supported by this HTTP endpoint');\n      }\n    }\n\n    const xhr = new XHR();\n    let responded = false;\n\n    const res = (err, result) => {\n      if (!responded) {\n        xhr.abort();\n        responded = true;\n\n        if (internal) {\n          internal(err, result);\n        } else {\n          const {\n            id,\n            jsonrpc\n          } = payload;\n          const load = err ? {\n            id,\n            jsonrpc,\n            error: {\n              message: err.message,\n              code: err.code\n            }\n          } : {\n            id,\n            jsonrpc,\n            result\n          };\n          this.emit('payload', load);\n        }\n      }\n    };\n\n    xhr.open('POST', this.url, true);\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    xhr.timeout = 60 * 1000;\n    xhr.onerror = res;\n    xhr.ontimeout = res;\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        try {\n          const response = JSON.parse(xhr.responseText);\n          res(response.error, response.result);\n        } catch (e) {\n          res(e);\n        }\n      }\n    };\n\n    xhr.send(JSON.stringify(payload));\n  }\n\n}\n\nmodule.exports = XHR => (url, options) => new HTTPConnection(XHR, url, options);","map":{"version":3,"sources":["/home/shashwat/Projects/Intern/node_modules/eth-provider/connections/http.js"],"names":["EventEmitter","require","uuid","dev","process","env","NODE_ENV","XHR","HTTPConnection","constructor","_XHR","url","options","connected","subscriptions","status","pollId","setTimeout","create","emit","Error","on","close","init","send","jsonrpc","method","params","id","err","response","pollSubscriptions","result","subscriptionTimeout","closed","map","p","parse","JSON","e","filter","n","forEach","console","log","clearTimeout","removeAllListeners","filterStatus","res","error","statusText","message","payload","code","internal","xhr","responded","abort","load","open","setRequestHeader","timeout","onerror","ontimeout","onreadystatechange","readyState","responseText","stringify","module","exports"],"mappings":"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","sourcesContent":["const EventEmitter = require('events')\nconst uuid = require('uuid/v4')\n\nconst dev = process.env.NODE_ENV === 'development'\n\nlet XHR\n\nclass HTTPConnection extends EventEmitter {\n  constructor (_XHR, url, options) {\n    super()\n    XHR = _XHR\n    this.connected = false\n    this.subscriptions = false\n    this.status = 'loading'\n    this.url = url\n    this.pollId = uuid()\n    setTimeout(() => this.create(), 0)\n  }\n\n  create () {\n    if (!XHR) return this.emit('error', new Error('No HTTP transport available'))\n    this.on('error', () => { if (this.connected) this.close() })\n    this.init()\n  }\n\n  init () {\n    this.send({ jsonrpc: '2.0', method: 'eth_syncing', params: [], id: 1 }, (err, response) => {\n      if (err) return this.emit('error', err)\n      this.send({ jsonrpc: '2.0', id: 1, method: 'eth_pollSubscriptions', params: [this.pollId, 'immediate'] }, (err, response) => {\n        if (!err) {\n          this.subscriptions = true\n          this.pollSubscriptions()\n        }\n        this.connected = true\n        this.emit('connect')\n      })\n    })\n  }\n\n  pollSubscriptions () {\n    this.send({ jsonrpc: '2.0', id: 1, method: 'eth_pollSubscriptions', params: [this.pollId] }, (err, result) => {\n      if (err) {\n        this.subscriptionTimeout = setTimeout(() => this.pollSubscriptions(), 10000)\n        return this.emit('error', err)\n      } else {\n        if (!this.closed) this.subscriptionTimeout = this.pollSubscriptions()\n        if (result) {\n          result.map(p => {\n            let parse\n            try { parse = JSON.parse(p) } catch (e) { parse = false }\n            return parse\n          }).filter(n => n).forEach(p => this.emit('payload', p))\n        }\n      }\n    })\n  }\n\n  close () {\n    if (dev) console.log('Closing HTTP connection')\n    this.closed = true\n    this.emit('close')\n    clearTimeout(this.subscriptionTimeout)\n    this.removeAllListeners()\n  }\n\n  filterStatus (res) {\n    if (res.status >= 200 && res.status < 300) return res\n    const error = new Error(res.statusText)\n    error.res = res\n    throw error.message\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload, internal) {\n    if (this.closed) return this.error(payload, 'Not connected')\n    if (payload.method === 'eth_subscribe') {\n      if (this.subscriptions) {\n        payload.pollId = this.pollId\n      } else {\n        return this.error(payload, 'Subscriptions are not supported by this HTTP endpoint')\n      }\n    }\n    const xhr = new XHR()\n    let responded = false\n    const res = (err, result) => {\n      if (!responded) {\n        xhr.abort()\n        responded = true\n        if (internal) {\n          internal(err, result)\n        } else {\n          const { id, jsonrpc } = payload\n          const load = err ? { id, jsonrpc, error: { message: err.message, code: err.code } } : { id, jsonrpc, result }\n          this.emit('payload', load)\n        }\n      }\n    }\n    xhr.open('POST', this.url, true)\n    xhr.setRequestHeader('Content-Type', 'application/json')\n    xhr.timeout = 60 * 1000\n    xhr.onerror = res\n    xhr.ontimeout = res\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        try {\n          const response = JSON.parse(xhr.responseText)\n          res(response.error, response.result)\n        } catch (e) {\n          res(e)\n        }\n      }\n    }\n    xhr.send(JSON.stringify(payload))\n  }\n}\n\nmodule.exports = XHR => (url, options) => new HTTPConnection(XHR, url, options)\n"]},"metadata":{},"sourceType":"script"}