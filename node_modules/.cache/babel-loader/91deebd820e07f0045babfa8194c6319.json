{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport useBombFinance from './useBombFinance';\nimport useRefresh from './useRefresh';\n\nconst useXbombAPR = () => {\n  const {\n    slowRefresh\n  } = useRefresh();\n  const [bombAPR, setBombAPR] = useState();\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance === null || bombFinance === void 0 ? void 0 : bombFinance.isUnlocked;\n  useEffect(() => {\n    async function fetchBalance() {\n      try {\n        setBombAPR(await bombFinance.getXbombAPR());\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    if (isUnlocked) {\n      fetchBalance();\n    }\n  }, [slowRefresh, isUnlocked, bombFinance]);\n  return bombAPR;\n};\n\nexport default useXbombAPR;","map":{"version":3,"sources":["/home/shashwat/Projects/Dyeus/src/hooks/useXbombAPR.ts"],"names":["useEffect","useState","useBombFinance","useRefresh","useXbombAPR","slowRefresh","bombAPR","setBombAPR","bombFinance","isUnlocked","fetchBalance","getXbombAPR","e","console","error"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAGA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAM;AAACC,IAAAA;AAAD,MAAgBF,UAAU,EAAhC;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,EAAtC;AAEA,QAAMO,WAAW,GAAGN,cAAc,EAAlC;AACA,QAAMO,UAAU,GAAGD,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEC,UAAhC;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeU,YAAf,GAA8B;AAC5B,UAAI;AACFH,QAAAA,UAAU,CAAC,MAAMC,WAAW,CAACG,WAAZ,EAAP,CAAV;AACD,OAFD,CAEE,OAAOC,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF;;AACD,QAAIH,UAAJ,EAAgB;AACdC,MAAAA,YAAY;AACb;AACF,GAXQ,EAWN,CAACL,WAAD,EAAcI,UAAd,EAA0BD,WAA1B,CAXM,CAAT;AAYA,SAAOF,OAAP;AACD,CAnBD;;AAqBA,eAAeF,WAAf","sourcesContent":["import {useEffect, useState} from 'react';\nimport useBombFinance from './useBombFinance';\nimport {PoolStats} from '../bomb-finance/types';\n\nimport useRefresh from './useRefresh';\n\nconst useXbombAPR = () => {\n  const {slowRefresh} = useRefresh();\n  const [bombAPR, setBombAPR] = useState<PoolStats>();\n\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance?.isUnlocked;\n  useEffect(() => {\n    async function fetchBalance() {\n      try {\n        setBombAPR(await bombFinance.getXbombAPR());\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    if (isUnlocked) {\n      fetchBalance();\n    }\n  }, [slowRefresh, isUnlocked, bombFinance]);\n  return bombAPR;\n};\n\nexport default useXbombAPR;\n"]},"metadata":{},"sourceType":"module"}