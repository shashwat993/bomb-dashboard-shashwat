{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useMemo, useState } from 'react';\nimport { useQuery } from \"./useQuery.js\";\nvar EAGER_METHODS = ['refetch', 'fetchMore', 'updateQuery', 'startPolling', 'subscribeToMore'];\nexport function useLazyQuery(query, options) {\n  var _a = useState({\n    called: false\n  }),\n      execution = _a[0],\n      setExecution = _a[1];\n\n  var result = useQuery(query, __assign(__assign(__assign({}, options), execution.options), {\n    fetchPolicy: execution.called ? options === null || options === void 0 ? void 0 : options.fetchPolicy : 'standby',\n    skip: undefined\n  }));\n\n  if (!execution.called) {\n    result = __assign(__assign({}, result), {\n      loading: false,\n      data: void 0,\n      error: void 0,\n      called: false\n    });\n  }\n\n  var eagerMethods = useMemo(function () {\n    var eagerMethods = {};\n\n    var _loop_1 = function (key) {\n      var method = result[key];\n\n      eagerMethods[key] = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        setExecution(function (execution) {\n          return __assign(__assign({}, execution), {\n            called: true\n          });\n        });\n        return method.apply(void 0, args);\n      };\n    };\n\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n\n      _loop_1(key);\n    }\n\n    return eagerMethods;\n  }, []);\n  result.error = result.error || void 0;\n  Object.assign(result, eagerMethods);\n  var execute = useCallback(function (executeOptions) {\n    setExecution({\n      called: true,\n      options: executeOptions\n    });\n    var promise = result.refetch(executeOptions === null || executeOptions === void 0 ? void 0 : executeOptions.variables).then(function (result1) {\n      var result2 = __assign(__assign({}, result), {\n        data: result1.data,\n        error: result1.error,\n        called: true,\n        loading: false\n      });\n\n      Object.assign(result2, eagerMethods);\n      return result2;\n    });\n    promise.catch(function () {});\n    return promise;\n  }, []);\n  return [execute, result];\n}","map":{"version":3,"sources":["../../../src/react/hooks/useLazyQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport {\n  LazyQueryHookOptions,\n  QueryLazyOptions,\n  QueryTuple,\n} from '../types/types';\nimport { useQuery } from './useQuery';\nimport { OperationVariables } from '../../core';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): QueryTuple<TData, TVariables> {\n  const [execution, setExecution] = useState<{\n    called: boolean,\n    options?: QueryLazyOptions<TVariables>,\n  }>({\n    called: false,\n  });\n\n  let result = useQuery<TData, TVariables>(query, {\n    ...options,\n    ...execution.options,\n    // We donâ€™t set skip to execution.called, because some useQuery SSR code\n    // checks skip for some reason.\n    fetchPolicy: execution.called ? options?.fetchPolicy : 'standby',\n    skip: undefined,\n  });\n\n  if (!execution.called) {\n    result = {\n      ...result,\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      called: false,\n    };\n  }\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = (...args: any) => {\n        setExecution((execution) => ({ ...execution, called: true }));\n        return (method as any)(...args);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  result.error = result.error || void 0;\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    QueryTuple<TData, TVariables>[0]\n  >((executeOptions?: QueryLazyOptions<TVariables>) => {\n    setExecution({ called: true, options: executeOptions });\n    const promise = result.refetch(executeOptions?.variables).then((result1) => {\n      const result2 = {\n        ...result,\n        data: result1.data,\n        error: result1.error,\n        called: true,\n        loading: false,\n      };\n\n      Object.assign(result2, eagerMethods);\n      return result2;\n    });\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}