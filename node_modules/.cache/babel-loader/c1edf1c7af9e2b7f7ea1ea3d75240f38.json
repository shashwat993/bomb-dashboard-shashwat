{"ast":null,"code":"var _jsxFileName = \"/home/shashwat/Projects/Dyeus/src/contexts/RefreshContext/RefreshContextProvider.tsx\";\nimport React, { useState, useEffect } from 'react';\nconst FAST_INTERVAL = 10000;\nconst SLOW_INTERVAL = 60000;\nexport const RefreshContext = React.createContext({\n  slow: 0,\n  fast: 0\n}); // This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\n\nexport const RefreshContextProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const [slow, setSlow] = useState(0);\n  const [fast, setFast] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast(prev => prev + 1);\n    }, FAST_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow(prev => prev + 1);\n    }, SLOW_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/React.createElement(RefreshContext.Provider, {\n    value: {\n      slow,\n      fast\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }\n  }, children);\n};","map":{"version":3,"sources":["/home/shashwat/Projects/Dyeus/src/contexts/RefreshContext/RefreshContextProvider.tsx"],"names":["React","useState","useEffect","FAST_INTERVAL","SLOW_INTERVAL","RefreshContext","createContext","slow","fast","RefreshContextProvider","children","setSlow","setFast","interval","setInterval","prev","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,MAAMC,aAAa,GAAG,KAAtB;AACA,MAAMC,aAAa,GAAG,KAAtB;AAEA,OAAO,MAAMC,cAAc,GAAGL,KAAK,CAACM,aAAN,CAAoB;AAACC,EAAAA,IAAI,EAAE,CAAP;AAAUC,EAAAA,IAAI,EAAE;AAAhB,CAApB,CAAvB,C,CAEP;;AACA,OAAO,MAAMC,sBAAgC,GAAG,QAAgB;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AAC9D,QAAM,CAACH,IAAD,EAAOI,OAAP,IAAkBV,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACO,IAAD,EAAOI,OAAP,IAAkBX,QAAQ,CAAC,CAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,QAAQ,GAAGC,WAAW,CAAC,YAAY;AACvCF,MAAAA,OAAO,CAAEG,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAP;AACD,KAF2B,EAEzBZ,aAFyB,CAA5B;AAGA,WAAO,MAAMa,aAAa,CAACH,QAAD,CAA1B;AACD,GALQ,EAKN,EALM,CAAT;AAOAX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,QAAQ,GAAGC,WAAW,CAAC,YAAY;AACvCH,MAAAA,OAAO,CAAEI,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAP;AACD,KAF2B,EAEzBX,aAFyB,CAA5B;AAGA,WAAO,MAAMY,aAAa,CAACH,QAAD,CAA1B;AACD,GALQ,EAKN,EALM,CAAT;AAOA,sBAAO,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAACN,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+CE,QAA/C,CAAP;AACD,CAnBM","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nconst FAST_INTERVAL = 10000;\nconst SLOW_INTERVAL = 60000;\n\nexport const RefreshContext = React.createContext({slow: 0, fast: 0});\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nexport const RefreshContextProvider: React.FC = ({children}) => {\n  const [slow, setSlow] = useState(0);\n  const [fast, setFast] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1);\n    }, FAST_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1);\n    }, SLOW_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n\n  return <RefreshContext.Provider value={{slow, fast}}>{children}</RefreshContext.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}