{"ast":null,"code":"const EventEmitter = require('events');\n\nclass EthereumProvider extends EventEmitter {\n  constructor(connection) {\n    super();\n    this.connected = false;\n    this.nextId = 0;\n    this.promises = {};\n    this.subscriptions = [];\n    this.connection = connection;\n    this.connection.on('connect', () => this.checkConnection());\n    this.connection.on('close', () => this.emit('close'));\n    this.connection.on('payload', payload => {\n      const {\n        id,\n        method,\n        error,\n        result\n      } = payload;\n\n      if (typeof id !== 'undefined') {\n        if (this.promises[id]) {\n          // Fulfill promise\n          payload.error ? this.promises[id].reject(error) : this.promises[id].resolve(result);\n          delete this.promises[id];\n        }\n      } else if (method && method.indexOf('_subscription') > -1) {\n        // Emit subscription result\n        this.emit(payload.params.subscription, payload.params.result);\n        this.emit(method, payload.params); // Latest EIP-1193\n\n        this.emit('data', payload); // Backwards Compatibility\n      }\n    });\n    this.on('newListener', (event, listener) => {\n      if (event === 'networkChanged') {\n        if (!this.attemptedNetworkSubscription && this.connected) this.startNetworkSubscription();\n      } else if (event === 'accountsChanged') {\n        if (!this.attemptedAccountsSubscription && this.connected) this.startAccountsSubscription();\n      }\n    });\n  }\n\n  async checkConnection() {\n    try {\n      this.emit('connect', await this._send('net_version'));\n      this.connected = true;\n      if (this.listenerCount('networkChanged') && !this.attemptedNetworkSubscription) this.startNetworkSubscription();\n      if (this.listenerCount('accountsChanged') && !this.attemptedAccountsSubscription) this.startAccountsSubscription();\n    } catch (e) {\n      this.connected = false;\n    }\n  }\n\n  async startNetworkSubscription() {\n    this.attemptedNetworkSubscription = true;\n\n    try {\n      let networkChanged = await this.subscribe('eth_subscribe', 'networkChanged');\n      this.on(networkChanged, netId => this.emit('networkChanged', netId));\n    } catch (e) {\n      console.warn('Unable to subscribe to networkChanged', e);\n    }\n  }\n\n  async startAccountsSubscription() {\n    this.attemptedAccountsSubscription = true;\n\n    try {\n      let accountsChanged = await this.subscribe('eth_subscribe', 'accountsChanged');\n      this.on(accountsChanged, accounts => this.emit('accountsChanged', accounts));\n    } catch (e) {\n      console.warn('Unable to subscribe to accountsChanged', e);\n    }\n  }\n\n  enable() {\n    return new Promise((resolve, reject) => {\n      this._send('eth_accounts').then(accounts => {\n        if (accounts.length > 0) {\n          this.accounts = accounts;\n          this.coinbase = accounts[0];\n          this.emit('enable');\n          resolve(accounts);\n        } else {\n          const err = new Error('User Denied Full Provider');\n          err.code = 4001;\n          reject(err);\n        }\n      }).catch(reject);\n    });\n  }\n\n  _send(method) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    if (!method || typeof method !== 'string') return new Error('Method is not a valid string.');\n    if (!(params instanceof Array)) return new Error('Params is not a valid array.');\n    const payload = {\n      jsonrpc: '2.0',\n      id: this.nextId++,\n      method,\n      params\n    };\n    const promise = new Promise((resolve, reject) => {\n      this.promises[payload.id] = {\n        resolve,\n        reject\n      };\n    });\n    this.connection.send(payload);\n    return promise;\n  }\n\n  send() {\n    // Send can be clobbered, proxy sendPromise for backwards compatibility\n    return this._send(...arguments);\n  }\n\n  _sendBatch(requests) {\n    return Promise.all(requests.map(payload => this._send(payload.method, payload.params)));\n  }\n\n  subscribe(type, method) {\n    let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return this._send(type, [method, ...params]).then(id => {\n      this.subscriptions.push(id);\n      return id;\n    });\n  }\n\n  unsubscribe(type, id) {\n    return this._send(type, [id]).then(success => {\n      if (success) {\n        this.subscriptions = this.subscriptions.filter(_id => _id !== id); // Remove subscription\n\n        this.removeAllListeners(id); // Remove listeners\n\n        return success;\n      }\n    });\n  }\n\n  sendAsync(payload, cb) {\n    // Backwards Compatibility\n    if (!cb || typeof cb !== 'function') return cb(new Error('Invalid or undefined callback provided to sendAsync'));\n    if (!payload) return cb(new Error('Invalid Payload')); // sendAsync can be called with an array for batch requests used by web3.js 0.x\n    // this is not part of EIP-1193's backwards compatibility but we still want to support it\n\n    if (payload instanceof Array) {\n      return this.sendAsyncBatch(payload, cb);\n    } else {\n      return this._send(payload.method, payload.params).then(result => {\n        cb(null, {\n          id: payload.id,\n          jsonrpc: payload.jsonrpc,\n          result\n        });\n      }).catch(err => {\n        cb(err);\n      });\n    }\n  }\n\n  sendAsyncBatch(payload, cb) {\n    return this._sendBatch(payload).then(results => {\n      let result = results.map((entry, index) => {\n        return {\n          id: payload[index].id,\n          jsonrpc: payload[index].jsonrpc,\n          result: entry\n        };\n      });\n      cb(null, result);\n    }).catch(err => {\n      cb(err);\n    });\n  }\n\n  isConnected() {\n    // Backwards Compatibility\n    return this.connected;\n  }\n\n  close() {\n    this.connection.close();\n    this.connected = false;\n    let error = new Error(`Provider closed, subscription lost, please subscribe again.`);\n    this.subscriptions.forEach(id => this.emit(id, error)); // Send Error objects to any open subscriptions\n\n    this.subscriptions = []; // Clear subscriptions\n  }\n\n}\n\nmodule.exports = EthereumProvider;","map":{"version":3,"sources":["/home/shashwat/Projects/Intern/node_modules/ethereum-provider/index.js"],"names":["EventEmitter","require","EthereumProvider","constructor","connection","connected","nextId","promises","subscriptions","on","checkConnection","emit","payload","id","method","error","result","reject","resolve","indexOf","params","subscription","event","listener","attemptedNetworkSubscription","startNetworkSubscription","attemptedAccountsSubscription","startAccountsSubscription","_send","listenerCount","e","networkChanged","subscribe","netId","console","warn","accountsChanged","accounts","enable","Promise","then","length","coinbase","err","Error","code","catch","Array","jsonrpc","promise","send","_sendBatch","requests","all","map","type","push","unsubscribe","success","filter","_id","removeAllListeners","sendAsync","cb","sendAsyncBatch","results","entry","index","isConnected","close","forEach","module","exports"],"mappings":"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","sourcesContent":["const EventEmitter = require('events')\n\nclass EthereumProvider extends EventEmitter {\n  constructor (connection) {\n    super()\n    this.connected = false\n    this.nextId = 0\n    this.promises = {}\n    this.subscriptions = []\n    this.connection = connection\n    this.connection.on('connect', () => this.checkConnection())\n    this.connection.on('close', () => this.emit('close'))\n    this.connection.on('payload', payload => {\n      const { id, method, error, result } = payload\n      if (typeof id !== 'undefined') {\n        if (this.promises[id]) { // Fulfill promise\n          payload.error ? this.promises[id].reject(error) : this.promises[id].resolve(result)\n          delete this.promises[id]\n        }\n      } else if (method && method.indexOf('_subscription') > -1) { // Emit subscription result\n        this.emit(payload.params.subscription, payload.params.result)\n        this.emit(method, payload.params) // Latest EIP-1193\n        this.emit('data', payload) // Backwards Compatibility\n      }\n    })\n    this.on('newListener', (event, listener) => {\n      if (event === 'networkChanged') {\n        if (!this.attemptedNetworkSubscription && this.connected) this.startNetworkSubscription()\n      } else if (event === 'accountsChanged') {\n        if (!this.attemptedAccountsSubscription && this.connected) this.startAccountsSubscription()\n      }\n    })\n  }\n  async checkConnection () {\n    try {\n      this.emit('connect', await this._send('net_version'))\n      this.connected = true\n      if (this.listenerCount('networkChanged') && !this.attemptedNetworkSubscription) this.startNetworkSubscription()\n      if (this.listenerCount('accountsChanged') && !this.attemptedAccountsSubscription) this.startAccountsSubscription()\n    } catch (e) {\n      this.connected = false\n    }\n  }\n  async startNetworkSubscription () {\n    this.attemptedNetworkSubscription = true\n    try {\n      let networkChanged = await this.subscribe('eth_subscribe', 'networkChanged')\n      this.on(networkChanged, netId => this.emit('networkChanged', netId))\n    } catch (e) {\n      console.warn('Unable to subscribe to networkChanged', e)\n    }\n  }\n  async startAccountsSubscription () {\n    this.attemptedAccountsSubscription = true\n    try {\n      let accountsChanged = await this.subscribe('eth_subscribe', 'accountsChanged')\n      this.on(accountsChanged, accounts => this.emit('accountsChanged', accounts))\n    } catch (e) {\n      console.warn('Unable to subscribe to accountsChanged', e)\n    }\n  }\n  enable () {\n    return new Promise((resolve, reject) => {\n      this._send('eth_accounts').then(accounts => {\n        if (accounts.length > 0) {\n          this.accounts = accounts\n          this.coinbase = accounts[0]\n          this.emit('enable')\n          resolve(accounts)\n        } else {\n          const err = new Error('User Denied Full Provider')\n          err.code = 4001\n          reject(err)\n        }\n      }).catch(reject)\n    })\n  }\n  _send (method, params = []) {\n    if (!method || typeof method !== 'string') return new Error('Method is not a valid string.')\n    if (!(params instanceof Array)) return new Error('Params is not a valid array.')\n    const payload = { jsonrpc: '2.0', id: this.nextId++, method, params }\n    const promise = new Promise((resolve, reject) => { this.promises[payload.id] = { resolve, reject } })\n    this.connection.send(payload)\n    return promise\n  }\n  send (...args) { // Send can be clobbered, proxy sendPromise for backwards compatibility\n    return this._send(...args)\n  }\n  _sendBatch (requests) {\n    return Promise.all(requests.map(payload => this._send(payload.method, payload.params)))\n  }\n  subscribe (type, method, params = []) {\n    return this._send(type, [method, ...params]).then(id => {\n      this.subscriptions.push(id)\n      return id\n    })\n  }\n  unsubscribe (type, id) {\n    return this._send(type, [id]).then(success => {\n      if (success) {\n        this.subscriptions = this.subscriptions.filter(_id => _id !== id) // Remove subscription\n        this.removeAllListeners(id) // Remove listeners\n        return success\n      }\n    })\n  }\n  sendAsync (payload, cb) { // Backwards Compatibility\n    if (!cb || typeof cb !== 'function') return cb(new Error('Invalid or undefined callback provided to sendAsync'))\n    if (!payload) return cb(new Error('Invalid Payload'))\n    // sendAsync can be called with an array for batch requests used by web3.js 0.x\n    // this is not part of EIP-1193's backwards compatibility but we still want to support it\n    if (payload instanceof Array) {\n      return this.sendAsyncBatch(payload, cb)\n    } else {\n      return this._send(payload.method, payload.params).then(result => {\n        cb(null, { id: payload.id, jsonrpc: payload.jsonrpc, result })\n      }).catch(err => {\n        cb(err)\n      })\n    }\n  }\n  sendAsyncBatch (payload, cb) {\n    return this._sendBatch(payload).then((results) => {\n      let result = results.map((entry, index) => {\n        return { id: payload[index].id, jsonrpc: payload[index].jsonrpc, result: entry }\n      })\n      cb(null, result)\n    }).catch(err => {\n      cb(err)\n    })\n  }\n  isConnected () { // Backwards Compatibility\n    return this.connected\n  }\n  close () {\n    this.connection.close()\n    this.connected = false\n    let error = new Error(`Provider closed, subscription lost, please subscribe again.`)\n    this.subscriptions.forEach(id => this.emit(id, error)) // Send Error objects to any open subscriptions\n    this.subscriptions = [] // Clear subscriptions\n  }\n}\n\nmodule.exports = EthereumProvider\n"]},"metadata":{},"sourceType":"script"}