{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\n\nconst useAllowance = (token, spender, pendingApproval) => {\n  const [allowance, setAllowance] = useState(null);\n  const {\n    account\n  } = useWallet();\n  const fetchAllowance = useCallback(async () => {\n    const allowance = await token.allowance(account, spender);\n    setAllowance(allowance);\n  }, [account, spender, token]);\n  useEffect(() => {\n    if (account && spender && token) {\n      fetchAllowance().catch(err => console.error(`Failed to fetch allowance: ${err.stack}`));\n    }\n  }, [account, spender, token, pendingApproval, fetchAllowance]);\n  return allowance;\n};\n\nexport default useAllowance;","map":{"version":3,"sources":["/home/shashwat/Projects/Dyeus/src/hooks/useAllowance.ts"],"names":["useCallback","useEffect","useState","useWallet","useAllowance","token","spender","pendingApproval","allowance","setAllowance","account","fetchAllowance","catch","err","console","error","stack"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,SAAT,QAA0B,YAA1B;;AAIA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAeC,OAAf,EAAgCC,eAAhC,KAA8D;AACjF,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAY,IAAZ,CAA1C;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAcP,SAAS,EAA7B;AAEA,QAAMQ,cAAc,GAAGX,WAAW,CAAC,YAAY;AAC7C,UAAMQ,SAAS,GAAG,MAAMH,KAAK,CAACG,SAAN,CAAgBE,OAAhB,EAAyBJ,OAAzB,CAAxB;AACAG,IAAAA,YAAY,CAACD,SAAD,CAAZ;AACD,GAHiC,EAG/B,CAACE,OAAD,EAAUJ,OAAV,EAAmBD,KAAnB,CAH+B,CAAlC;AAKAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,OAAO,IAAIJ,OAAX,IAAsBD,KAA1B,EAAiC;AAC/BM,MAAAA,cAAc,GAAGC,KAAjB,CAAwBC,GAAD,IAASC,OAAO,CAACC,KAAR,CAAe,8BAA6BF,GAAG,CAACG,KAAM,EAAtD,CAAhC;AACD;AACF,GAJQ,EAIN,CAACN,OAAD,EAAUJ,OAAV,EAAmBD,KAAnB,EAA0BE,eAA1B,EAA2CI,cAA3C,CAJM,CAAT;AAMA,SAAOH,SAAP;AACD,CAhBD;;AAkBA,eAAeJ,YAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { BigNumber } from 'ethers';\nimport ERC20 from '../bomb-finance/ERC20';\n\nconst useAllowance = (token: ERC20, spender: string, pendingApproval?: boolean) => {\n  const [allowance, setAllowance] = useState<BigNumber>(null);\n  const { account } = useWallet();\n\n  const fetchAllowance = useCallback(async () => {\n    const allowance = await token.allowance(account, spender);\n    setAllowance(allowance);\n  }, [account, spender, token]);\n\n  useEffect(() => {\n    if (account && spender && token) {\n      fetchAllowance().catch((err) => console.error(`Failed to fetch allowance: ${err.stack}`));\n    }\n  }, [account, spender, token, pendingApproval, fetchAllowance]);\n\n  return allowance;\n};\n\nexport default useAllowance;\n"]},"metadata":{},"sourceType":"module"}