{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport Web3ProviderEngine from 'web3-provider-engine';\nimport { ledgerEthereumBrowserClientFactoryAsync } from '@0x/subproviders/lib/src';\nimport { LedgerSubprovider } from '@0x/subproviders/lib/src/subproviders/ledger';\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js';\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar LedgerConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(LedgerConnector, _AbstractConnector);\n\n  function LedgerConnector(_ref) {\n    var _this;\n\n    var chainId = _ref.chainId,\n        url = _ref.url,\n        pollingInterval = _ref.pollingInterval,\n        requestTimeoutMs = _ref.requestTimeoutMs,\n        accountFetchingConfigs = _ref.accountFetchingConfigs,\n        baseDerivationPath = _ref.baseDerivationPath;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: [chainId]\n    }) || this;\n    _this.chainId = chainId;\n    _this.url = url;\n    _this.pollingInterval = pollingInterval;\n    _this.requestTimeoutMs = requestTimeoutMs;\n    _this.accountFetchingConfigs = accountFetchingConfigs;\n    _this.baseDerivationPath = baseDerivationPath;\n    return _this;\n  }\n\n  var _proto = LedgerConnector.prototype;\n\n  _proto.activate = function activate() {\n    try {\n      var _this3 = this;\n\n      if (!_this3.provider) {\n        var engine = new Web3ProviderEngine({\n          pollingInterval: _this3.pollingInterval\n        });\n        engine.addProvider(new LedgerSubprovider({\n          networkId: _this3.chainId,\n          ledgerEthereumClientFactoryAsync: ledgerEthereumBrowserClientFactoryAsync,\n          accountFetchingConfigs: _this3.accountFetchingConfigs,\n          baseDerivationPath: _this3.baseDerivationPath\n        }));\n        engine.addProvider(new CacheSubprovider());\n        engine.addProvider(new RPCSubprovider(_this3.url, _this3.requestTimeoutMs));\n        _this3.provider = engine;\n      }\n\n      _this3.provider.start();\n\n      return Promise.resolve({\n        provider: _this3.provider,\n        chainId: _this3.chainId\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n\n      return Promise.resolve(_this5.provider);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n\n      return Promise.resolve(_this7.chainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this9 = this;\n\n      return Promise.resolve(_this9.provider._providers[0].getAccountsAsync(1).then(function (accounts) {\n        return accounts[0];\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {\n    this.provider.stop();\n  };\n\n  return LedgerConnector;\n}(AbstractConnector);\n\nexport { LedgerConnector };","map":{"version":3,"sources":["../src/index.ts"],"names":["LedgerConnector","chainId","url","pollingInterval","requestTimeoutMs","accountFetchingConfigs","baseDerivationPath","supportedChainIds","engine","networkId","ledgerEthereumClientFactoryAsync","provider","accounts","deactivate"],"mappings":"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","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport Web3ProviderEngine from 'web3-provider-engine'\nimport { ledgerEthereumBrowserClientFactoryAsync } from '@0x/subproviders/lib/src' // https://github.com/0xProject/0x-monorepo/issues/1400\nimport { LedgerSubprovider } from '@0x/subproviders/lib/src/subproviders/ledger' // https://github.com/0xProject/0x-monorepo/issues/1400\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js'\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider' // https://github.com/0xProject/0x-monorepo/issues/1400\n\ninterface LedgerConnectorArguments {\n  chainId: number\n  url: string\n  pollingInterval?: number\n  requestTimeoutMs?: number\n  accountFetchingConfigs?: any\n  baseDerivationPath?: string\n}\n\nexport class LedgerConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly url: string\n  private readonly pollingInterval?: number\n  private readonly requestTimeoutMs?: number\n  private readonly accountFetchingConfigs?: any\n  private readonly baseDerivationPath?: string\n\n  private provider: any\n\n  constructor({\n    chainId,\n    url,\n    pollingInterval,\n    requestTimeoutMs,\n    accountFetchingConfigs,\n    baseDerivationPath\n  }: LedgerConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.url = url\n    this.pollingInterval = pollingInterval\n    this.requestTimeoutMs = requestTimeoutMs\n    this.accountFetchingConfigs = accountFetchingConfigs\n    this.baseDerivationPath = baseDerivationPath\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.provider) {\n      const engine = new Web3ProviderEngine({ pollingInterval: this.pollingInterval })\n      engine.addProvider(\n        new LedgerSubprovider({\n          networkId: this.chainId,\n          ledgerEthereumClientFactoryAsync: ledgerEthereumBrowserClientFactoryAsync,\n          accountFetchingConfigs: this.accountFetchingConfigs,\n          baseDerivationPath: this.baseDerivationPath\n        })\n      )\n      engine.addProvider(new CacheSubprovider())\n      engine.addProvider(new RPCSubprovider(this.url, this.requestTimeoutMs))\n      this.provider = engine\n    }\n\n    this.provider.start()\n\n    return { provider: this.provider, chainId: this.chainId }\n  }\n\n  public async getProvider(): Promise<Web3ProviderEngine> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null> {\n    return this.provider._providers[0].getAccountsAsync(1).then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.provider.stop()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}