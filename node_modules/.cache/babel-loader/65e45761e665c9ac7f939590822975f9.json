{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport config from './../config';\n/**\n * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\n * And https://docs.metamask.io/guide/ethereum-provider.html\n * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\n * @returns\n */\n\nexport const connectToNetwork = async provider => {\n  await provider.request({\n    method: 'wallet_addEthereumChain',\n    params: [{\n      chainId: `0x${config.chainId.toString(16)}`,\n      chainName: config.networkName,\n      nativeCurrency: {\n        name: 'BNB',\n        symbol: 'BNB',\n        decimals: 18\n      },\n      rpcUrls: ['https://rpc.ankr.com/bsc'],\n      blockExplorerUrls: [config.ftmscanUrl]\n    }]\n  });\n};\n\nconst usePromptNetwork = () => {\n  const [networkPrompt, setNetworkPrompt] = useState(false);\n  const {\n    ethereum\n  } = window;\n  useEffect(() => {\n    if (!networkPrompt) {\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\n        connectToNetwork(ethereum);\n        setNetworkPrompt(true);\n      }\n    }\n  }, [networkPrompt, ethereum]);\n};\n\nexport default usePromptNetwork;","map":{"version":3,"sources":["/home/shashwat/Projects/Intern/src/hooks/useNetworkPrompt.ts"],"names":["useEffect","useState","config","connectToNetwork","provider","request","method","params","chainId","toString","chainName","networkName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","ftmscanUrl","usePromptNetwork","networkPrompt","setNetworkPrompt","ethereum","window","networkVersion"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,QAAP,IAAyB;AACvD,QAAMA,QAAQ,CAACC,OAAT,CAAiB;AACrBC,IAAAA,MAAM,EAAE,yBADa;AAErBC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,OAAO,EAAG,KAAIN,MAAM,CAACM,OAAP,CAAeC,QAAf,CAAwB,EAAxB,CAA4B,EAD5C;AAEEC,MAAAA,SAAS,EAAER,MAAM,CAACS,WAFpB;AAGEC,MAAAA,cAAc,EAAE;AACdC,QAAAA,IAAI,EAAE,KADQ;AAEdC,QAAAA,MAAM,EAAE,KAFM;AAGdC,QAAAA,QAAQ,EAAE;AAHI,OAHlB;AAQEC,MAAAA,OAAO,EAAE,CAAC,0BAAD,CARX;AASEC,MAAAA,iBAAiB,EAAE,CAACf,MAAM,CAACgB,UAAR;AATrB,KADM;AAFa,GAAjB,CAAN;AAgBD,CAjBM;;AAmBP,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCpB,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM;AAAEqB,IAAAA;AAAF,MAAeC,MAArB;AAEAvB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACoB,aAAL,EAAoB;AAClB,UAAIE,QAAQ,IAAIA,QAAQ,CAACE,cAAT,KAA4BtB,MAAM,CAACM,OAAP,CAAeC,QAAf,EAA5C,EAAuE;AACrEN,QAAAA,gBAAgB,CAACmB,QAAD,CAAhB;AACAD,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;AACF;AACF,GAPQ,EAON,CAACD,aAAD,EAAgBE,QAAhB,CAPM,CAAT;AAQD,CAZD;;AAcA,eAAeH,gBAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport config from './../config';\n\n/**\n * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\n * And https://docs.metamask.io/guide/ethereum-provider.html\n * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\n * @returns\n */\nexport const connectToNetwork = async (provider: any) => {\n  await provider.request({\n    method: 'wallet_addEthereumChain',\n    params: [\n      {\n        chainId: `0x${config.chainId.toString(16)}`,\n        chainName: config.networkName,\n        nativeCurrency: {\n          name: 'BNB',\n          symbol: 'BNB',\n          decimals: 18,\n        },\n        rpcUrls: ['https://rpc.ankr.com/bsc'],\n        blockExplorerUrls: [config.ftmscanUrl],\n      },\n    ],\n  });\n};\n\nconst usePromptNetwork = () => {\n  const [networkPrompt, setNetworkPrompt] = useState(false);\n  const { ethereum } = window as any;\n\n  useEffect(() => {\n    if (!networkPrompt) {\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\n        connectToNetwork(ethereum);\n        setNetworkPrompt(true);\n      }\n    }\n  }, [networkPrompt, ethereum]);\n};\n\nexport default usePromptNetwork;\n"]},"metadata":{},"sourceType":"module"}