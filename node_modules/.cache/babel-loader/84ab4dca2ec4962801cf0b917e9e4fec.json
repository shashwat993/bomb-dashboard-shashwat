{"ast":null,"code":"var _jsxFileName = \"/home/shashwat/Projects/Dyeus/src/views/Bank/components/Stake.tsx\";\nimport React, { useMemo, useContext } from 'react';\nimport styled from 'styled-components'; // import Button from '../../../components/Button';\n\nimport { Button, Card, CardContent, Typography } from '@material-ui/core'; // import Card from '../../../components/Card';\n// import CardContent from '../../../components/CardContent';\n\nimport CardIcon from '../../../components/CardIcon';\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\nimport IconButton from '../../../components/IconButton'; //import Label from '../../../components/Label';\n\nimport Value from '../../../components/Value';\nimport { ThemeContext } from 'styled-components';\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\nimport useModal from '../../../hooks/useModal';\nimport useStake from '../../../hooks/useStake';\nimport useZap from '../../../hooks/useZap';\nimport useStakedBalance from '../../../hooks/useStakedBalance';\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useWithdraw from '../../../hooks/useWithdraw';\nimport { getDisplayBalance } from '../../../utils/formatBalance';\nimport DepositModal from './DepositModal';\nimport WithdrawModal from './WithdrawModal';\nimport ZapModal from './ZapModal';\nimport TokenSymbol from '../../../components/TokenSymbol';\n\nconst Stake = _ref => {\n  let {\n    bank\n  } = _ref;\n  console.log({\n    bank\n  });\n  const [approveStatus, approve] = useApprove(bank.depositToken, bank.address);\n  const {\n    color: themeColor\n  } = useContext(ThemeContext);\n  const tokenBalance = useTokenBalance(bank.depositToken);\n  const stakedBalance = useStakedBalance(bank.contract, bank.poolId);\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars(bank.depositTokenName, bank.depositToken);\n  const tokenPriceInDollars = useMemo(() => stakedTokenPriceInDollars ? stakedTokenPriceInDollars : null, [stakedTokenPriceInDollars]);\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(stakedBalance, bank.depositToken.decimal))).toFixed(2);\n  const {\n    onStake\n  } = useStake(bank);\n  const {\n    onZap\n  } = useZap(bank);\n  const {\n    onWithdraw\n  } = useWithdraw(bank);\n  const [onPresentDeposit, onDismissDeposit] = useModal( /*#__PURE__*/React.createElement(DepositModal, {\n    max: tokenBalance,\n    decimals: bank.depositToken.decimal,\n    onConfirm: amount => {\n      if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n      onStake(amount);\n      onDismissDeposit();\n    },\n    tokenName: bank.depositTokenName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }));\n  const [onPresentZap, onDissmissZap] = useModal( /*#__PURE__*/React.createElement(ZapModal, {\n    decimals: bank.depositToken.decimal,\n    onConfirm: (zappingToken, tokenName, amount) => {\n      if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n      onZap(zappingToken, tokenName, amount);\n      onDissmissZap();\n    },\n    tokenName: bank.depositTokenName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }));\n  const [onPresentWithdraw, onDismissWithdraw] = useModal( /*#__PURE__*/React.createElement(WithdrawModal, {\n    max: stakedBalance,\n    decimals: bank.depositToken.decimal,\n    onConfirm: amount => {\n      if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n      onWithdraw(amount);\n      onDismissWithdraw();\n    },\n    tokenName: bank.depositTokenName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }));\n  return /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StyledCardContentInner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StyledCardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TokenSymbol, {\n    symbol: bank.depositToken.symbol,\n    size: 54,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Value, {\n    value: getDisplayBalance(stakedBalance, bank.depositToken.decimal),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    style: {\n      textTransform: 'uppercase',\n      color: '#fffff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 18\n    }\n  }, `â‰ˆ $${earnedInDollars}`), /*#__PURE__*/React.createElement(Typography, {\n    style: {\n      textTransform: 'uppercase',\n      color: '#f9d749'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 16\n    }\n  }, `${bank.depositTokenName} Staked`)), /*#__PURE__*/React.createElement(StyledCardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, approveStatus !== ApprovalState.APPROVED ? /*#__PURE__*/React.createElement(Button, {\n    disabled: bank.closedForStaking || approveStatus === ApprovalState.PENDING || approveStatus === ApprovalState.UNKNOWN,\n    onClick: approve,\n    className: bank.closedForStaking || approveStatus === ApprovalState.PENDING || approveStatus === ApprovalState.UNKNOWN ? 'shinyButtonDisabled' : 'shinyButton',\n    style: {\n      marginTop: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }, `Approve ${bank.depositTokenName}`) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: onPresentWithdraw,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(RemoveIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(StyledActionSpacer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(IconButton, {\n    disabled: bank.closedForStaking || bank.depositTokenName === 'BOMB-BSHARE-LP' || bank.depositTokenName === 'BOMB' || bank.depositTokenName === 'BOMB-BTCB-LP' || bank.depositTokenName === '80BOMB-20BTCB-LP' || bank.depositTokenName === '80BSHARE-20WBNB-LP' || bank.depositTokenName === 'BUSM-BUSD-LP' || bank.depositTokenName === 'BBOND',\n    onClick: () => bank.closedForStaking ? null : onPresentZap(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FlashOnIcon, {\n    style: {\n      color: themeColor.grey[400]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(StyledActionSpacer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(IconButton, {\n    disabled: bank.closedForStaking,\n    onClick: () => bank.closedForStaking ? null : onPresentDeposit(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(AddIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 19\n    }\n  })))))));\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 28px;\n  width: 100%;\n`;\nconst StyledActionSpacer = styled.div`\n  height: ${props => props.theme.spacing[4]}px;\n  width: ${props => props.theme.spacing[4]}px;\n`;\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\nexport default Stake;","map":{"version":3,"sources":["/home/shashwat/Projects/Dyeus/src/views/Bank/components/Stake.tsx"],"names":["React","useMemo","useContext","styled","Button","Card","CardContent","Typography","CardIcon","AddIcon","RemoveIcon","FlashOnIcon","IconButton","Value","ThemeContext","useApprove","ApprovalState","useModal","useStake","useZap","useStakedBalance","useStakedTokenPriceInDollars","useTokenBalance","useWithdraw","getDisplayBalance","DepositModal","WithdrawModal","ZapModal","TokenSymbol","Stake","bank","console","log","approveStatus","approve","depositToken","address","color","themeColor","tokenBalance","stakedBalance","contract","poolId","stakedTokenPriceInDollars","depositTokenName","tokenPriceInDollars","earnedInDollars","Number","decimal","toFixed","onStake","onZap","onWithdraw","onPresentDeposit","onDismissDeposit","amount","isNaN","onPresentZap","onDissmissZap","zappingToken","tokenName","onPresentWithdraw","onDismissWithdraw","symbol","textTransform","APPROVED","closedForStaking","PENDING","UNKNOWN","marginTop","grey","StyledCardHeader","div","StyledCardActions","StyledActionSpacer","props","theme","spacing","StyledCardContentInner"],"mappings":"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","sourcesContent":["import React, {useMemo, useContext} from 'react';\nimport styled from 'styled-components';\n\n// import Button from '../../../components/Button';\nimport {Button, Card, CardContent, Typography} from '@material-ui/core';\n// import Card from '../../../components/Card';\n// import CardContent from '../../../components/CardContent';\nimport CardIcon from '../../../components/CardIcon';\nimport {AddIcon, RemoveIcon} from '../../../components/icons';\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\nimport IconButton from '../../../components/IconButton';\n//import Label from '../../../components/Label';\nimport Value from '../../../components/Value';\nimport {ThemeContext} from 'styled-components';\n\nimport useApprove, {ApprovalState} from '../../../hooks/useApprove';\nimport useModal from '../../../hooks/useModal';\nimport useStake from '../../../hooks/useStake';\nimport useZap from '../../../hooks/useZap';\nimport useStakedBalance from '../../../hooks/useStakedBalance';\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useWithdraw from '../../../hooks/useWithdraw';\n\nimport {getDisplayBalance} from '../../../utils/formatBalance';\n\nimport DepositModal from './DepositModal';\nimport WithdrawModal from './WithdrawModal';\nimport ZapModal from './ZapModal';\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport {Bank} from '../../../bomb-finance';\n\ninterface StakeProps {\n  bank: Bank;\n}\n\nconst Stake: React.FC<StakeProps> = ({ bank }) => {\n  console.log({bank})\n  const [approveStatus, approve] = useApprove(bank.depositToken, bank.address);\n\n  const {color: themeColor} = useContext(ThemeContext);\n  const tokenBalance = useTokenBalance(bank.depositToken);\n  const stakedBalance = useStakedBalance(bank.contract, bank.poolId);\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars(bank.depositTokenName, bank.depositToken);\n  const tokenPriceInDollars = useMemo(\n    () => (stakedTokenPriceInDollars ? stakedTokenPriceInDollars : null),\n    [stakedTokenPriceInDollars],\n  );\n  const earnedInDollars = (\n    Number(tokenPriceInDollars) * Number(getDisplayBalance(stakedBalance, bank.depositToken.decimal))\n  ).toFixed(2);\n  const {onStake} = useStake(bank);\n  const {onZap} = useZap(bank);\n  const {onWithdraw} = useWithdraw(bank);\n\n  const [onPresentDeposit, onDismissDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      decimals={bank.depositToken.decimal}\n      onConfirm={(amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        onStake(amount);\n        onDismissDeposit();\n      }}\n      tokenName={bank.depositTokenName}\n    />,\n  );\n\n  const [onPresentZap, onDissmissZap] = useModal(\n    <ZapModal\n      decimals={bank.depositToken.decimal}\n      onConfirm={(zappingToken, tokenName, amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        onZap(zappingToken, tokenName, amount);\n        onDissmissZap();\n      }}\n      tokenName={bank.depositTokenName}\n    />,\n  );\n\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\n    <WithdrawModal\n      max={stakedBalance}\n      decimals={bank.depositToken.decimal}\n      onConfirm={(amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        onWithdraw(amount);\n        onDismissWithdraw();\n      }}\n      tokenName={bank.depositTokenName}\n    />,\n  );\n\n  return (\n    <Card>\n      <CardContent>\n        <StyledCardContentInner>\n          <StyledCardHeader>\n            <CardIcon>\n              <TokenSymbol symbol={bank.depositToken.symbol} size={54} />\n            </CardIcon>\n            <Value value={getDisplayBalance(stakedBalance, bank.depositToken.decimal)} />\n\n            \n            {/* <Label text={`â‰ˆ $${earnedInDollars}`} /> */}\n\n                 <Typography style={{textTransform: 'uppercase', color: '#fffff'}}>\n                      {`â‰ˆ $${earnedInDollars}`}\n            </Typography>\n               <Typography style={{textTransform: 'uppercase', color: '#f9d749'}}>\n              {`${bank.depositTokenName} Staked`}\n                    </Typography>\n            {/* <Label text={`${bank.depositTokenName} Staked`} /> */}\n          </StyledCardHeader>\n          <StyledCardActions>\n            {approveStatus !== ApprovalState.APPROVED ? (\n              <Button\n                disabled={\n                  bank.closedForStaking ||\n                  approveStatus === ApprovalState.PENDING ||\n                  approveStatus === ApprovalState.UNKNOWN\n                }\n                onClick={approve}\n                className={\n                  bank.closedForStaking ||\n                  approveStatus === ApprovalState.PENDING ||\n                  approveStatus === ApprovalState.UNKNOWN\n                    ? 'shinyButtonDisabled'\n                    : 'shinyButton'\n                }\n                style={{marginTop: '20px'}}\n              >\n                {`Approve ${bank.depositTokenName}`}\n              </Button>\n            ) : (\n              <>\n                <IconButton onClick={onPresentWithdraw}>\n                  <RemoveIcon />\n                </IconButton>\n                <StyledActionSpacer />\n                <IconButton\n                  disabled={\n                    bank.closedForStaking ||\n                      bank.depositTokenName === 'BOMB-BSHARE-LP' ||\n                       bank.depositTokenName === 'BOMB' ||\n                      bank.depositTokenName === 'BOMB-BTCB-LP' ||\n                      bank.depositTokenName === '80BOMB-20BTCB-LP' ||\n                        bank.depositTokenName === '80BSHARE-20WBNB-LP' ||\n                      bank.depositTokenName === 'BUSM-BUSD-LP' ||\n                      bank.depositTokenName === 'BBOND'\n\n                  }\n                  onClick={() => (bank.closedForStaking ? null : onPresentZap())}\n                >\n                  <FlashOnIcon style={{color: themeColor.grey[400]}} />\n                </IconButton>\n                <StyledActionSpacer />\n                <IconButton\n                  disabled={bank.closedForStaking}\n                  onClick={() => (bank.closedForStaking ? null : onPresentDeposit())}\n                >\n                  <AddIcon />\n                </IconButton>\n              </>\n            )}\n          </StyledCardActions>\n        </StyledCardContentInner>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 28px;\n  width: 100%;\n`;\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport default Stake;\n"]},"metadata":{},"sourceType":"module"}