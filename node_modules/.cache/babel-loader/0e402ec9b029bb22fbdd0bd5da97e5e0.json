{"ast":null,"code":"var _jsxFileName = \"/home/shashwat/Projects/Dyeus/src/views/Bank/components/ZapModal.tsx\";\nimport React, { useState, useMemo } from 'react';\nimport { Button, Select, MenuItem, InputLabel, withStyles } from '@material-ui/core'; // import Button from '../../../components/Button'\n\nimport Modal from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\nimport styled from 'styled-components';\nimport { getDisplayBalance } from '../../../utils/formatBalance';\nimport Label from '../../../components/Label';\nimport useLpStats from '../../../hooks/useLpStats';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useBombFinance from '../../../hooks/useBombFinance';\nimport { useWallet } from 'use-wallet';\nimport useApproveZapper, { ApprovalState } from '../../../hooks/useApproveZapper';\nimport { BOMB_TICKER, BSHARE_TICKER, BNB_TICKER, BTC_TICKER } from '../../../utils/constants';\nimport { Alert } from '@material-ui/lab';\n\nconst ZapModal = _ref => {\n  let {\n    onConfirm,\n    onDismiss,\n    tokenName = '',\n    decimals = 18\n  } = _ref;\n  const bombFinance = useBombFinance();\n  const {\n    balance\n  } = useWallet();\n  const ftmBalance = (Number(balance) / 1e18).toFixed(4).toString();\n  const bombBalance = useTokenBalance(bombFinance.BOMB);\n  const bshareBalance = useTokenBalance(bombFinance.BSHARE);\n  const btcBalance = useTokenBalance(bombFinance.BTC);\n  const [val, setVal] = useState('');\n  const [zappingToken, setZappingToken] = useState(BNB_TICKER);\n  const [zappingTokenBalance, setZappingTokenBalance] = useState(ftmBalance);\n  const [estimate, setEstimate] = useState({\n    token0: '0',\n    token1: '0'\n  }); // token0 will always be BNB in this case\n\n  const [approveZapperStatus, approveZapper] = useApproveZapper(zappingToken);\n  const bombFtmLpStats = useLpStats('BOMB-BTCB-LP');\n  const tShareFtmLpStats = useLpStats('BSHARE-BNB-LP');\n  const bombLPStats = useMemo(() => bombFtmLpStats ? bombFtmLpStats : null, [bombFtmLpStats]);\n  const bshareLPStats = useMemo(() => tShareFtmLpStats ? tShareFtmLpStats : null, [tShareFtmLpStats]);\n  const ftmAmountPerLP = tokenName.startsWith(BOMB_TICKER) ? bombLPStats === null || bombLPStats === void 0 ? void 0 : bombLPStats.ftmAmount : bshareLPStats === null || bshareLPStats === void 0 ? void 0 : bshareLPStats.ftmAmount;\n  /**\n   * Checks if a value is a valid number or not\n   * @param n is the value to be evaluated for a number\n   * @returns\n   */\n\n  function isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  const handleChangeAsset = event => {\n    const value = event.target.value;\n    setZappingToken(value);\n    setZappingTokenBalance(ftmBalance);\n\n    if (event.target.value === BSHARE_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(bshareBalance, decimals));\n    }\n\n    if (event.target.value === BOMB_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(bombBalance, decimals));\n    }\n\n    if (event.target.value === BTC_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(btcBalance, decimals));\n    }\n  };\n\n  const handleChange = async e => {\n    if (e.currentTarget.value === '' || e.currentTarget.value === 0) {\n      setVal(e.currentTarget.value);\n      setEstimate({\n        token0: '0',\n        token1: '0'\n      });\n    }\n\n    if (!isNumeric(e.currentTarget.value)) return;\n    setVal(e.currentTarget.value);\n    const estimateZap = await bombFinance.estimateZapIn(zappingToken, tokenName, String(e.currentTarget.value));\n    setEstimate({\n      token0: estimateZap[0].toString(),\n      token1: estimateZap[1].toString()\n    });\n  };\n\n  const handleSelectMax = async () => {\n    setVal(zappingTokenBalance);\n    const estimateZap = await bombFinance.estimateZapIn(zappingToken, tokenName, String(zappingTokenBalance));\n    setEstimate({\n      token0: estimateZap[0].toString(),\n      token1: estimateZap[1].toString()\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalTitle, {\n    text: `Zap in ${tokenName}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StyledActionSpacer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(InputLabel, {\n    style: {\n      color: '#2c2560'\n    },\n    id: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, \"Select asset to zap with\"), /*#__PURE__*/React.createElement(Select, {\n    onChange: handleChangeAsset,\n    style: {\n      color: '#2c2560'\n    },\n    labelId: \"label\",\n    id: \"select\",\n    value: zappingToken,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StyledMenuItem, {\n    value: BNB_TICKER,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"BNB\"), /*#__PURE__*/React.createElement(StyledMenuItem, {\n    value: BSHARE_TICKER,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, \"BSHARE\")), /*#__PURE__*/React.createElement(TokenInput, {\n    onSelectMax: handleSelectMax,\n    onChange: handleChange,\n    value: val,\n    max: zappingTokenBalance,\n    symbol: zappingToken,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    text: \"Zap Estimations\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StyledDescriptionText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, ' ', tokenName, \": \", Number(estimate.token0) / Number(ftmAmountPerLP)), /*#__PURE__*/React.createElement(StyledDescriptionText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, ' ', \"(\", Number(estimate.token0), \" \", tokenName.startsWith(BSHARE_TICKER) ? BSHARE_TICKER : BNB_TICKER, \" /\", ' ', Number(estimate.token1), \" \", tokenName.startsWith(BSHARE_TICKER) ? BNB_TICKER : BSHARE_TICKER, \")\", ' '), /*#__PURE__*/React.createElement(ModalActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    onClick: () => approveZapperStatus !== ApprovalState.APPROVED ? approveZapper() : onConfirm(zappingToken, tokenName, val),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, approveZapperStatus !== ApprovalState.APPROVED ? 'Approve' : \"Let's go\")), /*#__PURE__*/React.createElement(StyledActionSpacer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Alert, {\n    variant: \"filled\",\n    severity: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, \"New feature. Use at your own risk!\"));\n};\n\nconst StyledActionSpacer = styled.div`\n  height: ${props => props.theme.spacing[4]}px;\n  width: ${props => props.theme.spacing[4]}px;\n`;\nconst StyledDescriptionText = styled.div`\n  align-items: center;\n  color: ${props => props.theme.color.grey[400]};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 22px;\n  justify-content: flex-start;\n`;\nconst StyledMenuItem = withStyles({\n  root: {\n    backgroundColor: 'white',\n    color: '#2c2560',\n    '&:hover': {\n      backgroundColor: 'grey',\n      color: '#2c2560'\n    },\n    selected: {\n      backgroundColor: 'black'\n    }\n  }\n})(MenuItem);\nexport default ZapModal;","map":{"version":3,"sources":["/home/shashwat/Projects/Dyeus/src/views/Bank/components/ZapModal.tsx"],"names":["React","useState","useMemo","Button","Select","MenuItem","InputLabel","withStyles","Modal","ModalActions","ModalTitle","TokenInput","styled","getDisplayBalance","Label","useLpStats","useTokenBalance","useBombFinance","useWallet","useApproveZapper","ApprovalState","BOMB_TICKER","BSHARE_TICKER","BNB_TICKER","BTC_TICKER","Alert","ZapModal","onConfirm","onDismiss","tokenName","decimals","bombFinance","balance","ftmBalance","Number","toFixed","toString","bombBalance","BOMB","bshareBalance","BSHARE","btcBalance","BTC","val","setVal","zappingToken","setZappingToken","zappingTokenBalance","setZappingTokenBalance","estimate","setEstimate","token0","token1","approveZapperStatus","approveZapper","bombFtmLpStats","tShareFtmLpStats","bombLPStats","bshareLPStats","ftmAmountPerLP","startsWith","ftmAmount","isNumeric","n","isNaN","parseFloat","isFinite","handleChangeAsset","event","value","target","handleChange","e","currentTarget","estimateZap","estimateZapIn","String","handleSelectMax","color","APPROVED","StyledActionSpacer","div","props","theme","spacing","StyledDescriptionText","grey","StyledMenuItem","root","backgroundColor","selected"],"mappings":"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","sourcesContent":["import React, {useState, useMemo} from 'react';\n\nimport {Button, Select, MenuItem, InputLabel, withStyles} from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, {ModalProps} from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\nimport styled from 'styled-components';\n\nimport {getDisplayBalance} from '../../../utils/formatBalance';\nimport Label from '../../../components/Label';\nimport useLpStats from '../../../hooks/useLpStats';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useBombFinance from '../../../hooks/useBombFinance';\nimport {useWallet} from 'use-wallet';\nimport useApproveZapper, {ApprovalState} from '../../../hooks/useApproveZapper';\nimport {BOMB_TICKER, BSHARE_TICKER, BNB_TICKER, BTC_TICKER} from '../../../utils/constants';\nimport {Alert} from '@material-ui/lab';\n\ninterface ZapProps extends ModalProps {\n  onConfirm: (zapAsset: string, lpName: string, amount: string) => void;\n  tokenName?: string;\n  decimals?: number;\n}\n\nconst ZapModal: React.FC<ZapProps> = ({onConfirm, onDismiss, tokenName = '', decimals = 18}) => {\n  const bombFinance = useBombFinance();\n  const {balance} = useWallet();\n  const ftmBalance = (Number(balance) / 1e18).toFixed(4).toString();\n  const bombBalance = useTokenBalance(bombFinance.BOMB);\n  const bshareBalance = useTokenBalance(bombFinance.BSHARE);\n  const btcBalance = useTokenBalance(bombFinance.BTC);\n  const [val, setVal] = useState('');\n  const [zappingToken, setZappingToken] = useState(BNB_TICKER);\n  const [zappingTokenBalance, setZappingTokenBalance] = useState(ftmBalance);\n  const [estimate, setEstimate] = useState({token0: '0', token1: '0'}); // token0 will always be BNB in this case\n  const [approveZapperStatus, approveZapper] = useApproveZapper(zappingToken);\n  const bombFtmLpStats = useLpStats('BOMB-BTCB-LP');\n  const tShareFtmLpStats = useLpStats('BSHARE-BNB-LP');\n  const bombLPStats = useMemo(() => (bombFtmLpStats ? bombFtmLpStats : null), [bombFtmLpStats]);\n  const bshareLPStats = useMemo(() => (tShareFtmLpStats ? tShareFtmLpStats : null), [tShareFtmLpStats]);\n  const ftmAmountPerLP = tokenName.startsWith(BOMB_TICKER) ? bombLPStats?.ftmAmount : bshareLPStats?.ftmAmount;\n  /**\n   * Checks if a value is a valid number or not\n   * @param n is the value to be evaluated for a number\n   * @returns\n   */\n  function isNumeric(n: any) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n  const handleChangeAsset = (event: any) => {\n    const value = event.target.value;\n    setZappingToken(value);\n    setZappingTokenBalance(ftmBalance);\n    if (event.target.value === BSHARE_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(bshareBalance, decimals));\n    }\n    if (event.target.value === BOMB_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(bombBalance, decimals));\n    }\n    if (event.target.value === BTC_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(btcBalance, decimals));\n    }\n  };\n\n  const handleChange = async (e: any) => {\n    if (e.currentTarget.value === '' || e.currentTarget.value === 0) {\n      setVal(e.currentTarget.value);\n      setEstimate({token0: '0', token1: '0'});\n    }\n    if (!isNumeric(e.currentTarget.value)) return;\n    setVal(e.currentTarget.value);\n    const estimateZap = await bombFinance.estimateZapIn(zappingToken, tokenName, String(e.currentTarget.value));\n    setEstimate({token0: estimateZap[0].toString(), token1: estimateZap[1].toString()});\n  };\n\n  const handleSelectMax = async () => {\n    setVal(zappingTokenBalance);\n    const estimateZap = await bombFinance.estimateZapIn(zappingToken, tokenName, String(zappingTokenBalance));\n    setEstimate({token0: estimateZap[0].toString(), token1: estimateZap[1].toString()});\n  };\n\n  return (\n    <Modal>\n      <ModalTitle text={`Zap in ${tokenName}`} />\n\n      <StyledActionSpacer />\n      <InputLabel style={{color: '#2c2560'}} id=\"label\">\n        Select asset to zap with\n      </InputLabel>\n      <Select onChange={handleChangeAsset} style={{color: '#2c2560'}} labelId=\"label\" id=\"select\" value={zappingToken}>\n        <StyledMenuItem value={BNB_TICKER}>BNB</StyledMenuItem>\n        <StyledMenuItem value={BSHARE_TICKER}>BSHARE</StyledMenuItem>\n        {/* <StyledMenuItem value={BTC_TICKER}>BTC</StyledMenuItem> */}\n        {/* Bomb as an input for zapping will be disabled due to issues occuring with the Gatekeeper system */}\n        {/* <StyledMenuItem value={BOMB_TICKER}>BOMB</StyledMenuItem> */}\n      </Select>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={zappingTokenBalance}\n        symbol={zappingToken}\n      />\n      <Label text=\"Zap Estimations\" />\n      <StyledDescriptionText>\n        {' '}\n        {tokenName}: {Number(estimate.token0) / Number(ftmAmountPerLP)}\n      </StyledDescriptionText>\n      <StyledDescriptionText>\n        {' '}\n        ({Number(estimate.token0)} {tokenName.startsWith(BSHARE_TICKER) ? BSHARE_TICKER : BNB_TICKER} /{' '}\n        {Number(estimate.token1)} {tokenName.startsWith(BSHARE_TICKER) ? BNB_TICKER : BSHARE_TICKER}){' '}\n      </StyledDescriptionText>\n      <ModalActions>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() =>\n            approveZapperStatus !== ApprovalState.APPROVED ? approveZapper() : onConfirm(zappingToken, tokenName, val)\n          }\n        >\n          {approveZapperStatus !== ApprovalState.APPROVED ? 'Approve' : \"Let's go\"}\n        </Button>\n      </ModalActions>\n\n      <StyledActionSpacer />\n      <Alert variant=\"filled\" severity=\"info\">\n        New feature. Use at your own risk!\n      </Alert>\n    </Modal>\n  );\n};\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledDescriptionText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.color.grey[400]};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 22px;\n  justify-content: flex-start;\n`;\nconst StyledMenuItem = withStyles({\n  root: {\n    backgroundColor: 'white',\n    color: '#2c2560',\n    '&:hover': {\n      backgroundColor: 'grey',\n      color: '#2c2560',\n    },\n    selected: {\n      backgroundColor: 'black',\n    },\n  },\n})(MenuItem);\n\nexport default ZapModal;\n"]},"metadata":{},"sourceType":"module"}