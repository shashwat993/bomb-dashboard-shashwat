{"ast":null,"code":"import EventEmitter from \"eventemitter3\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport { HttpConnection } from \"@walletconnect/jsonrpc-http-connection\";\nimport { getRpcUrl, signingMethods } from \"@walletconnect/utils\";\nimport { SignerConnection } from \"@walletconnect/signer-connection\";\n\nclass WalletConnectProvider {\n  constructor(opts) {\n    this.events = new EventEmitter();\n    this.rpc = {\n      infuraId: opts === null || opts === void 0 ? void 0 : opts.infuraId,\n      custom: opts === null || opts === void 0 ? void 0 : opts.rpc\n    };\n    this.signer = new JsonRpcProvider(new SignerConnection(opts));\n    const chainId = this.signer.connection.chainId || (opts === null || opts === void 0 ? void 0 : opts.chainId) || 1;\n    this.http = this.setHttpProvider(chainId);\n    this.registerEventListeners();\n  }\n\n  get connected() {\n    return this.signer.connection.connected;\n  }\n\n  get connector() {\n    return this.signer.connection.connector;\n  }\n\n  get accounts() {\n    return this.signer.connection.accounts;\n  }\n\n  get chainId() {\n    return this.signer.connection.chainId;\n  }\n\n  get rpcUrl() {\n    var _a;\n\n    return ((_a = this.http) === null || _a === void 0 ? void 0 : _a.connection).url || \"\";\n  }\n\n  async request(args) {\n    switch (args.method) {\n      case \"eth_requestAccounts\":\n        await this.connect();\n        return this.signer.connection.accounts;\n\n      case \"eth_accounts\":\n        return this.signer.connection.accounts;\n\n      case \"eth_chainId\":\n        return this.signer.connection.chainId;\n\n      default:\n        break;\n    }\n\n    if (signingMethods.includes(args.method)) {\n      return this.signer.request(args);\n    }\n\n    if (typeof this.http === \"undefined\") {\n      throw new Error(`Cannot request JSON-RPC method (${args.method}) without provided rpc url`);\n    }\n\n    return this.http.request(args);\n  }\n\n  sendAsync(args, callback) {\n    this.request(args).then(response => callback(null, response)).catch(error => callback(error, undefined));\n  }\n\n  async enable() {\n    const accounts = await this.request({\n      method: \"eth_requestAccounts\"\n    });\n    return accounts;\n  }\n\n  async connect() {\n    if (!this.signer.connection.connected) {\n      await this.signer.connect();\n    }\n  }\n\n  async disconnect() {\n    if (this.signer.connection.connected) {\n      await this.signer.disconnect();\n    }\n  }\n\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n\n  get isWalletConnect() {\n    return true;\n  }\n\n  registerEventListeners() {\n    this.signer.connection.on(\"accountsChanged\", accounts => {\n      this.events.emit(\"accountsChanged\", accounts);\n    });\n    this.signer.connection.on(\"chainChanged\", chainId => {\n      this.http = this.setHttpProvider(chainId);\n      this.events.emit(\"chainChanged\", chainId);\n    });\n    this.signer.on(\"disconnect\", () => {\n      this.events.emit(\"disconnect\");\n    });\n  }\n\n  setHttpProvider(chainId) {\n    const rpcUrl = getRpcUrl(chainId, this.rpc);\n    if (typeof rpcUrl === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpcUrl));\n    return http;\n  }\n\n}\n\nexport default WalletConnectProvider;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import EventEmitter from \"eventemitter3\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport { HttpConnection } from \"@walletconnect/jsonrpc-http-connection\";\nimport { getRpcUrl, signingMethods } from \"@walletconnect/utils\";\nimport { SignerConnection } from \"@walletconnect/signer-connection\";\nclass WalletConnectProvider {\n    constructor(opts) {\n        this.events = new EventEmitter();\n        this.rpc = { infuraId: opts === null || opts === void 0 ? void 0 : opts.infuraId, custom: opts === null || opts === void 0 ? void 0 : opts.rpc };\n        this.signer = new JsonRpcProvider(new SignerConnection(opts));\n        const chainId = this.signer.connection.chainId || (opts === null || opts === void 0 ? void 0 : opts.chainId) || 1;\n        this.http = this.setHttpProvider(chainId);\n        this.registerEventListeners();\n    }\n    get connected() {\n        return this.signer.connection.connected;\n    }\n    get connector() {\n        return this.signer.connection.connector;\n    }\n    get accounts() {\n        return this.signer.connection.accounts;\n    }\n    get chainId() {\n        return this.signer.connection.chainId;\n    }\n    get rpcUrl() {\n        var _a;\n        return ((_a = this.http) === null || _a === void 0 ? void 0 : _a.connection).url || \"\";\n    }\n    async request(args) {\n        switch (args.method) {\n            case \"eth_requestAccounts\":\n                await this.connect();\n                return this.signer.connection.accounts;\n            case \"eth_accounts\":\n                return this.signer.connection.accounts;\n            case \"eth_chainId\":\n                return this.signer.connection.chainId;\n            default:\n                break;\n        }\n        if (signingMethods.includes(args.method)) {\n            return this.signer.request(args);\n        }\n        if (typeof this.http === \"undefined\") {\n            throw new Error(`Cannot request JSON-RPC method (${args.method}) without provided rpc url`);\n        }\n        return this.http.request(args);\n    }\n    sendAsync(args, callback) {\n        this.request(args)\n            .then(response => callback(null, response))\n            .catch(error => callback(error, undefined));\n    }\n    async enable() {\n        const accounts = await this.request({ method: \"eth_requestAccounts\" });\n        return accounts;\n    }\n    async connect() {\n        if (!this.signer.connection.connected) {\n            await this.signer.connect();\n        }\n    }\n    async disconnect() {\n        if (this.signer.connection.connected) {\n            await this.signer.disconnect();\n        }\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    get isWalletConnect() {\n        return true;\n    }\n    registerEventListeners() {\n        this.signer.connection.on(\"accountsChanged\", accounts => {\n            this.events.emit(\"accountsChanged\", accounts);\n        });\n        this.signer.connection.on(\"chainChanged\", chainId => {\n            this.http = this.setHttpProvider(chainId);\n            this.events.emit(\"chainChanged\", chainId);\n        });\n        this.signer.on(\"disconnect\", () => {\n            this.events.emit(\"disconnect\");\n        });\n    }\n    setHttpProvider(chainId) {\n        const rpcUrl = getRpcUrl(chainId, this.rpc);\n        if (typeof rpcUrl === \"undefined\")\n            return undefined;\n        const http = new JsonRpcProvider(new HttpConnection(rpcUrl));\n        return http;\n    }\n}\nexport default WalletConnectProvider;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}